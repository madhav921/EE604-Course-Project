# -*- coding: utf-8 -*-
"""EE604-Assignment-1-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Th-jJ333njeiEL9CvKEiNW4N69YDhAu
"""

import numpy as np
import cv2

img = cv2.imread('jigsaw.jpg')

"""## Misaligned parts coordinates

### Img 1 and 2 coordinates
"""
# trying out edge detection method for image 1 and 2
# checking where neighbouring pixel values change abruptly

img_gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
# cv2_imshow(img_gray)
(x_dim, y_dim, z_dim) = img.shape
# print(img.shape)
h = 380
for i in range(50,y_dim):
  if abs(int(img_gray[h][i])-int(img_gray[h][i-8]))>100:
    # print(i)
    k = i-8
    break
k = 190
w=50
hor_edges = []
ver_edges = []
for i in range(x_dim,1,-10):
  if abs(int(img_gray[w][i])-int(img_gray[w][i-8]))>50:
    l = i
    # hor_edges.append(i)
    break
# print(l)
hor_edges.append(410)

w = 10
for i in range(250,1,-1):
  if abs(int(img_gray[w][i])-int(img_gray[w][i-8]))>50:
    l = i
    # hor_edges.append(i)
    break

hor_edges.append(l+2)

# img1_corners = [[0,0],[k,hor_edges[1]]]
# img2_corners = [[0,hor_edges[1]],[k,hor_edges[0]]]
img1_corners = [[0,0],[k,200]]
img2_corners = [[0,200],[k,410]]
# print(img2_corners)

img12_corners = [img1_corners[0],img2_corners[1]]
# img5_corners = [[0,hor_edges[1]-10],[k,hor_edges[0]-10]]
img5_corners = [[0,k],[k,400]]


# image 3 and 4 coordinates abtained by hit and trial method

"""### Img 3 coordinates"""

# img = cv2.imread('/content/jigsaw.jpg')
img3_corners = [[150,515],[329,699]]

"""### Img 4 coordinates"""

# img = cv2.imread('/content/jigsaw.jpg')
# img4_corners = [[370,370],[420,796]]
img4_corners = [[370,370],[795,420]]

"""## Image Transformations

### Vertical Flip
"""

def vertical_flip(img_corners,img):
  n = img_corners[1][1]-img_corners[0][1]+1
  k = img_corners[1][1]
  for i in range(img_corners[0][1],img_corners[0][1]+int(n/2)):
    for j in range(img_corners[0][0],img_corners[1][0]):
      img[i,j,0],img[k,j,0] = img[k,j,0],img[i,j,0]
      img[i,j,1],img[k,j,1] = img[k,j,1],img[i,j,1]
      img[i,j,2],img[k,j,2] = img[k,j,2],img[i,j,2]
    k-=1
  return img

"""### Horizontal Flip"""

def horizontal_flip(img_corners,img):
  n = img_corners[1][1] - img_corners[0][1]+1
  k = img_corners[1][1]
  for j in range(img_corners[0][1],img_corners[0][1]+int(n/2)):
    for i in range(img_corners[0][0],img_corners[1][0]):
      img[i,j,0],img[i,k,0] = img[i,k,0],img[i,j,0]
      img[i,j,1],img[i,k,1] = img[i,k,1],img[i,j,1]
      img[i,j,2],img[i,k,2] = img[i,k,2],img[i,j,2]
    k -= 1
  return img

"""### Move Image"""

def replace(img1_corners,img2_corners,img):
  ref = np.zeros(((img1_corners[1][0]-img1_corners[0][0]+1,img1_corners[1][1]-img1_corners[0][1]+1,3)))
  # print(ref.shape)
  a=0
  b=0
  for j in range(img1_corners[0][0],img1_corners[1][0]):
    for i in range(img1_corners[0][1],img1_corners[1][1]):
      ref[a,b,0] = img[i,j,0]
      ref[a,b,1] = img[i,j,1]
      ref[a,b,2] = img[i,j,2]
      b+=1
    a+=1
    b=0
  a=0
  b=0
  for j in range(img2_corners[0][0],img2_corners[1][0]):
    for i in range(img2_corners[0][1],img2_corners[1][1]):
      img[i,j,0] = ref[a,b,0]
      img[i,j,1] = ref[a,b,1]
      img[i,j,2] = ref[a,b,2]
      b+=1
    a+=1
    b=0
  return img

"""### Storing Image parts"""

def storeImg(img_corners,img):
  ref = np.zeros(((img_corners[1][0]-img_corners[0][0]+1,img_corners[1][1]-img_corners[0][1]+1,3)))
  # print(ref.shape)
  a=0
  b=0
  for j in range(img_corners[0][0],img_corners[1][0]):
    for i in range(img_corners[0][1],img_corners[1][1]):
      ref[a,b,0] = img[i,j,0]
      ref[a,b,1] = img[i,j,1]
      ref[a,b,2] = img[i,j,2]
      b+=1
    a+=1
    b=0
  return ref

"""### Swap Imgaes"""

def swap(img1_corners, img2_corners, img):
  
  ref1 = storeImg(img1_corners,img)
  ref2 = storeImg(img2_corners,img)

  a=0
  b=0
  for j in range(0,190):
    for i in range(0,200):
      img[i,j,0] = ref2[a,b,0]
      img[i,j,1] = ref2[a,b,1]
      img[i,j,2] = ref2[a,b,2]
      b+=1
    a+=1
    b=0

  a=0
  b=0
  for j in range(0,190):
    for i in range(200,400):
      img[i,j,0] = ref1[a,b,0]
      img[i,j,1] = ref1[a,b,1]
      img[i,j,2] = ref1[a,b,2]
      b+=1
    a+=1
    b=0
  return img

"""### Interchange Color Channels"""

def change_channel(img_corners,img):
  img = np.array(img)

  img_temp = img[210:400,0:190]
  img_temp = img_temp[:,:,[1,0,2]]
  img[210:400,0:190] = img_temp
      
  return img

"""### Normal Padding"""

def normalPad(img_corners,img):
  a = img_corners[1][0]+10
  b = 0
  for i in range(img_corners[1][0],img_corners[0][0]-1,-1):
    for j in range(img_corners[0][1],img_corners[1][1]):
      img[i,j,0] = img[a,b,0]
      img[i,j,1] = img[a,b,1]
      img[i,j,2] = img[a,b,2]
      b+=1
    a+=1
    b=0
  
  return img

"""### Mirror Padding"""

def mirrorPad(img_corners, img):
  a = img_corners[0][0]-1
  b = img_corners[1][0]+1
  c = img_corners[0][1]
  n = img_corners[1][0] - img_corners[0][0] + 1
  for i in range(img_corners[0][0],img_corners[0][0]+int(n/2)):
  # for i in range(400,406):
    for j in range(img_corners[0][1],img_corners[1][1]):
      img[i,j,0] = img[a,c,0]
      img[i,j,1] = img[a,c,1]
      img[i,j,2] = img[a,c,2]
      c+=1
    a-=1
    c=img_corners[0][1]

  c = img_corners[0][1]
  for i in range(img_corners[1][0],img_corners[1][0]-int(n/2)-1,-1):
  # for i in range(410,405,-1):
    for j in range(img_corners[0][1],img_corners[1][1]):
      img[i,j,0] = img[b,c,0]
      img[i,j,1] = img[b,c,1]
      img[i,j,2] = img[b,c,2]
      c+=1
    b+=1
    c=img_corners[0][1]

  return img

"""## Solve the jigsaw"""

# img = cv2.imread('/content/jigsaw.jpg')

# Swap image parts 1 and 2
img = swap(img1_corners,img2_corners,img)

new_img1_corners = [[0,0],[190,210]]
new_img2_corners = [[210,0],[400,190]]
pad1 = [[0,0],[10,200]]

img = horizontal_flip(img3_corners,img)
img = vertical_flip(img4_corners,img)
img = vertical_flip(new_img1_corners,img)
img = normalPad([[0,0],[10,200]],img)
img = change_channel(new_img2_corners,img)
# img = normalPad2(img)
img = mirrorPad([[400,0],[410,190]],img)

cv2.imwrite("jigsolved.jpg", img)
